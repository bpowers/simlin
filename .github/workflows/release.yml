name: Build and Release

on:
  push:
    tags:
      - 'pysimlin-v*'
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: cp311-* cp312-* cp313-*
          CIBW_SKIP: pp* *-musllinux*
          CIBW_ARCHS_MACOS: arm64
          CIBW_ARCHS_LINUX: x86_64 aarch64
          CIBW_BEFORE_BUILD: |
            set -ex  # Exit on error and print commands
            python -m pip install --upgrade pip
            pip install cffi setuptools wheel
            # Install protoc
            if [ "$(uname)" = "Linux" ]; then
              echo "Installing protoc for Linux..."
              # Try downloading binary directly (yum often doesn't have protobuf-compiler)
              ARCH="$(uname -m)"
              if [ "$ARCH" = "x86_64" ]; then 
                PROTOC_ZIP="protoc-25.1-linux-x86_64.zip"
              elif [ "$ARCH" = "aarch64" ]; then 
                PROTOC_ZIP="protoc-25.1-linux-aarch_64.zip"
              else 
                echo "Unsupported arch: $ARCH" && exit 1
              fi
              curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v25.1/$PROTOC_ZIP"
              unzip -o "$PROTOC_ZIP" -d /usr/local
              rm "$PROTOC_ZIP"
              protoc --version  # Verify installation
            elif [ "$(uname)" = "Darwin" ]; then
              brew install protobuf || true
            fi
            # Install Rust if needed
            if ! command -v cargo >/dev/null 2>&1; then
              echo "Installing Rust..."
              curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable
              source "$HOME/.cargo/env"
            fi
            source "$HOME/.cargo/env" || true  # Ensure cargo is in PATH
            UNAME_S="$(uname -s)"; UNAME_M="$(uname -m)"
            if [ "$UNAME_S" = "Darwin" ] && [ "$UNAME_M" = "arm64" ]; then RUST_TARGET=aarch64-apple-darwin; fi
            if [ "$UNAME_S" = "Linux" ] && [ "$UNAME_M" = "x86_64" ]; then RUST_TARGET=x86_64-unknown-linux-gnu; fi
            if [ "$UNAME_S" = "Linux" ] && [ "$UNAME_M" = "aarch64" ]; then RUST_TARGET=aarch64-unknown-linux-gnu; fi
            echo "Adding Rust target: $RUST_TARGET"
            rustup target add "$RUST_TARGET"
            # Build in the project root to use workspace configuration
            echo "Building libsimlin..."
            cargo build --release --target "$RUST_TARGET" -p simlin
            # Copy library to where pysimlin expects it
            echo "Copying library..."
            mkdir -p src/libsimlin/target/release
            cp target/"$RUST_TARGET"/release/libsimlin.a src/libsimlin/target/release/
            ls -la src/libsimlin/target/release/  # Verify copy
        with:
          package-dir: src/pysimlin

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  test-wheels:
    name: Test wheels
    needs: build-wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14]
        python-version: ['3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: wheelhouse
          merge-multiple: true

      - name: Install wheel
        run: |
          python -m pip install --upgrade pip
          # Find the right wheel for this platform
          PYVER=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          if [ "$RUNNER_OS" = "Linux" ]; then
            PLATFORM="manylinux"
            ARCH=$(uname -m)
            if [ "$ARCH" = "x86_64" ]; then
              WHEEL=$(ls wheelhouse/simlin-*-${PYVER}-*-${PLATFORM}*_x86_64.whl 2>/dev/null | head -1)
            else
              WHEEL=$(ls wheelhouse/simlin-*-${PYVER}-*-${PLATFORM}*_aarch64.whl 2>/dev/null | head -1)
            fi
          elif [ "$RUNNER_OS" = "macOS" ]; then
            # macOS ARM64
            WHEEL=$(ls wheelhouse/simlin-*-${PYVER}-*-macosx*_arm64.whl 2>/dev/null | head -1)
          fi
          
          if [ -z "$WHEEL" ]; then
            echo "No compatible wheel found for Python ${PYVER} on ${RUNNER_OS}"
            ls -la wheelhouse/
            exit 1
          fi
          
          echo "Installing wheel: $WHEEL"
          pip install "$WHEEL"
          pip install pytest pytest-cov numpy pandas

      - name: Run tests
        run: |
          cd src/pysimlin
          RUST_BACKTRACE=1 pytest -q tests/
