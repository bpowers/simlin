#[cfg(test)]
mod tests {
    use crate::xmile;
    use std::io::BufReader;

    #[test]
    fn test_parse_sir_xmile() {
        // This is the actual XMILE generated by xmutil for SIR.mdl
        let xmile = r#"<xmile xmlns="http://docs.oasis-open.org/xmile/ns/XMILE/v1.0" xmlns:isee="http://iseesystems.com/XMILE" version="1.0">
    <isee:prefs show_module_prefix="true" layer="model"/>
    <header>
        <options namespace="std"/>
        <vendor>Ventana Systems, xmutil</vendor>
        <product lang="en">Vensim, xmutil</product>
    </header>
    <sim_specs method="Euler" time_units="Day" isee:sim_duration="0" isee:save_interval="2.000000">
        <start>0</start>
        <stop>200</stop>
        <dt>0.0625</dt>
    </sim_specs>
    <model_units/>
    <dimensions/>
    <model>
        <variables>
            <module name="SIR-Model"/>
        </variables>
    </model>
    <model name="SIR-Model">
        <variables>
            <module name="Control"/>
            <stock name="Infectious Population I">
                <doc>The infectious population accumulates the infection rate and the inmigration of infectious rate less the recovery rate.</doc>
                <inflow>Infection_Rate</inflow>
                <outflow>Recovery_Rate</outflow>
                <eqn>1</eqn>
                <units>People</units>
            </stock>
        </variables>
    </model>
</xmile>"#;

        let mut reader = BufReader::new(xmile.as_bytes());
        let project = xmile::project_from_reader(&mut reader)
            .expect("Should successfully parse XMILE with module references");

        // Validate the parsed structure
        assert_eq!(
            project.models.len(),
            2,
            "Should have 2 models: main and SIR-Model"
        );

        // Check the main model - it may have module references in its variables
        let _main_model = project
            .models
            .iter()
            .find(|m| m.name == "main")
            .expect("Should have a main model");
        // The main model's structure depends on how modules are represented

        // Check the SIR-Model
        let sir_model = project
            .models
            .iter()
            .find(|m| m.name == "SIR-Model")
            .expect("Should have a SIR-Model");
        // The SIR-Model should have variables (or another module reference)
        // We're just checking it was parsed correctly
        assert_eq!(sir_model.name, "SIR-Model");
    }
}
